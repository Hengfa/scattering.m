function layer_S = U_to_S(layer_U,layer_banks)
%% FFT
nVariables_to_blur = length(layer_banks);
is_towards_S = false;
layer_Y = cell(1,nVariables_to_blur+1);
layer_Y{1+0} = initialize_Y(layer_U,layer_banks,is_towards_S);

%% Iterated one-variable blurring
% TODO: make a boolean option for the blurring of each variable
for variable_index = 1:nVariables_to_blur
    bank = layer_banks{variable_index};
    if bank.behavior.S.is_blurred
        layer_Y{1+variable_index} = blur(layer_Y{variable_index},bank);
    elseif bank.behavior.S.is_delocalized
        layer_Y{1+variable_index} = ...
            delocalize(layer_Y{variable_index},bank);
    end
end

%% IFFT
layer_Y{end} = terminate_Y(layer_Y{end});

%% Ensure that the output of the blurring is real
real_blurred_data = dispatch_unary_handle(@real,layer_Y{end}.data);

%% Output storage
layer_S = layer_U;
layer_S.unpadding_tree = layer_Y{end}.unpadding_tree;
layer_S.data = real_blurred_data;
end
