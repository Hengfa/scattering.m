function bank = sibling_blur_bank(bank,sibling,uncle)
if nargin<3
    uncle = [];
end
nSibling_gammas = length(sibling.metas);
sibling_log2_samplings = [sibling.metas.log2_sampling];

log2_oversampling = bank.behavior.S.log2_oversampling;

end


nGammas = length(variable.metas);
    gamma_subscript = branch.gamma{end}.leaf.subscripts;
    subsref_structure.type = '{}';
    subsref_structure.subs = repmat({':'},1,length(sub_Y.keys{end}));
    data_ft = sub_Y.data_ft;
    blur_handle = @(x,log2_resampling) ...
        dispatch_multiply(x,bank.phi,log2_resampling,bank.spec);
    log2_T = log2(bank.spec.T);
    log2_oversampling = bank.behavior.S.log2_oversampling;
    for gamma_index = 1:nGammas
        subsref_structure.subs{gamma_subscript} = gamma_index;
        sub_input = subsref(data_ft,subsref_structure);
        log2_sampling = variable.metas(gamma_index).log2_sampling;
        critical_log2_resampling = 1 - log2_T - log2_sampling;
        unbounded_log2_resampling = ...
            log2_oversampling + critical_log2_resampling;
        log2_resampling = min(unbounded_log2_resampling,0);
        sub_output = blur_handle(sub_input,log2_resampling);
        next_sub_Y.data_ft = ...
            subsasgn(next_sub_Y.data_ft,subsref_structure,sub_output);
    end